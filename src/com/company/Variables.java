package com.company;

public class Variables {

    /*--------------------------------------------------*/
    /*                ПРИМИТИВНЫЕ ТИПЫ                  */
    /*--------------------------------------------------*/

    /*---Целые числа---*/

    //long - Выделяется 8 байт в памяти
    long numLong; // диапазон значений: ОТ -9223372036854775808 ДО 9223372036854775807

    //int - Выделяется 4 байт в памяти
    int numInt; // диапазон значений: ОТ -2147483648 ДО 2147483647

    //short - Выделяется 2 байт в памяти
    short numShort; // диапазон значений: ОТ -32768 ДО 32767

    //byte - Выделяется 1 байт в памяти
    byte numByte; // диапазон значений: ОТ -128 ДО 128

    // значение по умолчанию
    int num0; // num0 = 0, у всех целых числах

    // значение при инициализации
    int num1 = 1; // num1 = 1;

    /*---Числа с плавающей точкой---*/

    //double - Выделяется 8 байт в памяти, исп для вычисления значений большой (дес тыс, сто тыс) точности
    double numDouble; // диапазон значений: ОТ 4.9е-324 ДО 1.8е+308

    //float - Выделяется 4 байт в памяти, исп для вычисления значений небольшой (сотые,тыс) точности
    float numFloat; // диапазон значений: ОТ 1.4е-045 ДО 3.4е+ОЗ8

    /*---Символы---*/

    //char - Выделяется 2 байт в памяти
    char numChar; // диапазон значений: от О до 65536.

    /*---Логические значения---*/

    //boolean - Выделяется 1 байт в памяти
    boolean numBoolean; // возможные значения true и false



    /*--------------------------------------------------*/
    /*                    ЛИТЕРАЛЫ                      */
    /*--------------------------------------------------*/

    /*--------------16---------------*/
    /*возможный диапазон значений от 0 до 15 */
    /*   10         2
       10 - А   1010 - A
       11 - B   1011 - B
       12 - C   1100 - C
       13 - D   1101 - D
       14 - E   1110 - E
       15 - F   1111 - F */
    /*пример 16-ого числа: 01a6f72b  */
    /*-------------------------------*/

    /*--------------8---------------*/
    /*возможный диапазон значений от 0 до 7*/
    /*пример 8-ого числа: 01672  */
    /*------------------------------*/

    /*--------------2---------------*/
    /*возможный диапазон значений от 0 до 1*/
    /*пример 2-ого числа: 01001  */
    /*------------------------------*/

    /*---Целочисленные литералы---*/

    long litLong = 0x7fffffffffffffffL;//максимальное значение по типу long
    int litInt = 0x7fffffff;//максимальное значение по типу int
    short litShort = 0x7fff;//максимальное значение по типу short
    byte litByte = 0x7f;//максимальное значение по типу byte

    int litMin1 = 0xffffffff;// litmin1 = -1, (-2147483648 + 2147483647) все отрицательные складываем с положительными

    //целочисленные литералы можно определить и в двоичной форме.
    int litBin = 0b1010;

    // в обозначении целочисленных литералов можно также указывать один или несколько знаков подчеркивания.
    int litIntUnderline1 = 111_222_333; //знаки подчеркивания игнорируются.
    int litIntUnderline2 = 111___222___333; //и такие тоже знаки подчеркивания игнорируются.

    // двоичные значения зачастую визуально группируются в блоки по четыре цифры:
    int litIntUnderline3 = 0b1101_0101_0001_1010; //групировка блоков по четыре цыфры двоичного числа

    /*---Литералы с плавающей точкой---*/

    double litDouble = 67.0148e-10;
    float litFloat = 25.5f;

    //Шестнадцатеричные литералы с плавающей точкой - обозначением Р или р вместо Е или е.
    double litDoubleHex = 0x12.1p0;// 18.125*2^0

    //При компиляции символы подчеркивания игнорируются.
    double litDoubleUnderline = 9_423_497.1_0_9;

    /*---Логические литералы---*/

    boolean litBoolean; // true != 1, а литерал false != 0

    /*---Символьные литералы---*/

    /*
    \ddd        ->       Восьмеричный символ (ddd) можноиспользовать только 3 цыфры 8-ой форме
    \ u x x x x ->       Шестнадцатеричный символ в Юникоде (хххх) можноиспользовать только 4 цыфры в 16-ой форме
    \'          ->       Одинарная кавычка
    \"          ->       Двойная кавычка
    \\          ->       Обратная косая черта
    \r          ->       Возврат каретки
    \n          ->       Новая строка (или перевод строки)
    \f          ->       Подача страницы
    \t          ->       Табуляция
    \b          ->       Возврат на одну позицию ("забой")
    */

    char litChar8A = '\141'; //символ 'a' в 8-ой форме
    char litChar16A = '\u0061'; //символ 'a' в 16-ой форме
    char litCharQuotes = '\"'; //символ '"'

    /*---Строковые литералы---*/

    String litString = "\"This is in quotes\""; //строковый литерал



    /*--------------------------------------------------*/
    /*                ОБЛАСТЬ ВИДИМОСТИ                 */
    /*--------------------------------------------------*/

    private static String TEXT = "The end."; //5. Статические переменные классов существуют все время работы программы. Их видимость также определяется модификаторами доступа.

    public static void  arguments (String[] args) //3. Переменные — аргументы метода — существуют везде внутри метода.
    {
        System.out.println("Hi");

        String s = "Hi!"; //1. Переменная, объявленная в методе, существует/видна с начала объявления до конца метода.
        System.out.println(s);

        if(null != args)
        {
            String s2 = s; //2. Переменная, объявленная в блоке кода, существует до конца этого блока кода.
            System.out.println(s2);
        }

        Variables variables = new Variables();
        System.out.println(variables.classVariables);
        System.out.println(TEXT);

    }

    public String classVariables; //4. Переменные класса/объекта существуют все время жизни содержащего их объекта. Их видимость дополнительно регулируется специальными модификаторами доступа: public, private.

    public Variables()
    {
        classVariables = "Class Variables test.";
    }

    
}
